---
- name: Debug configs for {{ service_details.key }}
  tags:
    - services
  ansible.builtin.debug:
    msg:
      - "service_details.key: {{ service_details.key }}"
      - "service_details.value: {{ service_details.value }}"
  loop: "{{ services | dict2items }}"
  loop_control:
    label: "{{ service_details.key }}"
    loop_var: service_details

- name: Install service {{ service_details.key }}
  tags:
    - services
  become: true
  ansible.builtin.apt:
    name: "{{ service_details.value.package }}"
    state: present
  loop: "{{ services | dict2items }}"
  loop_control:
    label: "{{ service_details.key }}"
    loop_var: service_details

- name: Deploy config files for service {{ service_details.key }}
  tags:
    - services
  ansible.builtin.set_fact:
    current_service_details: "{{ service_item }}"
  loop: "{{ services | dict2items }}"
  loop_control:
    label: "{{ service_item.key }}"
    loop_var: service_item

- name: Deploy and manage service {{ current_service_details.key }}
  tags:
    - services
  block:
    - name: Deploy service config template for {{ config_item.value.dest }}
      ansible.builtin.template:
        src: "{{ config_item.value.src }}"
        dest: "{{ config_item.value.dest }}"
        mode: "{{ config_item.value.mode }}"
        owner: "{{ config_item.value.owner | default('root') }}"
        group: "{{ config_item.value.group | default('root') }}"
      register: config_status
      become: true
      loop: "{{ current_service_details.value.configs | dict2items }}"
      loop_control:
        label: "{{ current_service_details.key }} - {{ config_item.key }}"
        loop_var: config_item
      when: config_item.value.enabled | default(false) | bool

    - name: Restart service {{ current_service_details.key }}
      ansible.builtin.service:
        name: "{{ current_service_details.value.unit_name }}"
        state: restarted
      register: result
      become: true
      when:
        - config_status.changed and current_service_details.value.enabled | default(false) | bool
      ignore_errors: true

    - name: Check if log_file exists
      ansible.builtin.stat:
        path: "{{ current_service_details.value.log_file }}"
      register: log_file_stat
      when:
        - result.failed | default(false) and current_service_details.value.log_file is defined

    - name: Fetch logs from service log_file
      ansible.builtin.command:
        cmd: tail -n 10 {{ current_service_details.value.log_file }}
      register: file_logs
      changed_when: false
      when: log_file_stat.stat.exists is defined and log_file_stat.stat.exists

    - name: Display logs from {{ current_service_details.key }}
      ansible.builtin.debug:
        var: file_logs.stdout_lines
      changed_when: false
      when:
        - result.failed | default(false)
        - file_logs.stdout_lines | length > 0

    - name: Fetching logs from journalctl for {{ current_service_details.value.unit_name }}
      ansible.builtin.command:
        cmd: journalctl -u {{ current_service_details.value.unit_name }}.service -n 10 --no-pager
      register: logs
      changed_when: false
      when:
        - result.failed | default(false)
        - (current_service_details.value.log_file is not defined) or not log_file_stat.stat.exists

    - name: Display journalctl logs {{ current_service_details.key }}
      ansible.builtin.debug:
        var: logs.stdout_lines
      when:
        - result.failed | default(false)
        - logs is defined
        - logs.stdout_lines | default([]) | length > 0

    - name: Final status of service {{ current_service_details.value.unit_name }}
      ansible.builtin.fail:
        msg: "Error managing service {{ current_service_details.value.unit_name }}"
      when: result.failed | default(false)
